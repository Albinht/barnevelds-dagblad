generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  password      String?
  name          String?
  image         String?
  role          Role      @default(EDITOR)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
  comments      Comment[]
  sessions      Session[]
  accounts      Account[]
}

model Article {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String
  summary     String
  content     String
  image       String
  category    String
  tags        String[]
  premium     Boolean   @default(false)
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  views       Int       @default(0)
  authorName  String?   // Custom author name field
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  media       Media[]

  @@index([slug])
  @@index([category])
  @@index([publishedAt])
  @@index([featured])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  approved  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articleId String
  authorId  String
  parentId  String?
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([articleId])
  @@index([approved])
}

model Bedrijf {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  category    String
  logo        String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([category])
  @@index([featured])
}

model Media {
  id        String   @id @default(cuid())
  filename  String
  url       String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Advertisement {
  id        String    @id @default(cuid())
  slot      String    @unique
  title     String
  imageUrl  String?
  linkUrl   String?
  script    String?
  active    Boolean   @default(true)
  startDate DateTime?
  endDate   DateTime?
  views     Int       @default(0)
  clicks    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([slot])
  @@index([active])
}

enum Role {
  ADMIN
  EDITOR
  MODERATOR
}
